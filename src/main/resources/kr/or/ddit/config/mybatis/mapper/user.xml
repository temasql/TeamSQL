<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="user">

	<!-- 회원가입 -->
	<insert id="insertUser" parameterType="userVo">
		INSERT INTO USERS
		VALUES
		(
			 #{user_id}
			,'C'
			,'N'
			,#{user_pw}
			,#{user_name}
			,#{user_email}
			,SYSDATE
			,#{user_path, jdbcType=VARCHAR}
		)
	</insert>
	
	<!-- 회원 아이디에 해당하는 사용자 정보 조회 -->
	<select id="getUser" parameterType="String" resultType="userVo">
		SELECT *
		FROM USERS
		WHERE USER_ID = #{user_id}
	</select>
	
	<!-- 이메일과 이름을 입력하여 ID찾기 -->
	<select id="findUserId" parameterType="userVo" resultType="String">
		SELECT USER_ID
		FROM USERS
		WHERE USER_NAME = #{user_name}
		AND USER_EMAIL = #{user_email}
	</select>
	
	<!-- 아이디와 이메일을 입력하여 PW찾기 -->
	<select id="findUserPw" parameterType="userVo" resultType="String">
		SELECT USER_PW
		FROM USERS
		WHERE USER_ID = #{user_id}
		AND USER_EMAIL = #{user_email}
	</select>
	
	
	<!-- 일반회원 페이징 처리 -->
	<select id="userList" parameterType="map" resultType="userVo">
		<![CDATA[ 
			SELECT *
			FROM 
				(SELECT A.*, ROWNUM RN 
				FROM 
					(SELECT A.USER_ID, A.USER_NAME, A.USER_EMAIL, A.USER_DT, A.USER_PATH 
					FROM  USERS A
	                   WHERE EXIT_RIGHT = 'N'
	                   AND USER_RIGHT = 'C'
	                   AND USER_ID NOT IN( SELECT USER_ID_FK FROM BLACKLIST )
	                   AND USER_ID LIKE '%'||#{search}||'%'
					ORDER BY USER_ID) A) 
			WHERE RN >= (#{page} - 1) * #{pageSize} + 1 
			AND   RN <=  #{page} * #{pageSize} 
		]]>
	</select>
	
	<!-- 검색한 결과의 일반회원 수 -->
	<select id="userSearchCount" parameterType="string" resultType="int" >
		SELECT COUNT(USER_ID)
	    FROM USERS
	    WHERE EXIT_RIGHT = 'N'
	    AND USER_RIGHT = 'C'
	    AND USER_ID NOT IN( SELECT USER_ID_FK FROM BLACKLIST )
	    AND USER_ID LIKE '%'||#{search}||'%'
	</select>
	
	<select id="map" parameterType="map" resultType="userVo">
		SELECT *
		FROM USERS
		WHERE ID = #{map1}
		AND .. = #{map2}
		...
	</select>
	
	<!-- PW찾기 후 발송한 임시비밀번호를 암호화 -->
	<update id="temporaryUpdateUserPw" parameterType="userVo">
		UPDATE USERS
		SET  USER_PW    = #{user_pw}
		WHERE USER_ID   = #{user_id}
	</update>

	<!-- 사용자 정보 수정 -->
	<update id="updateUser" parameterType="userVo">
		UPDATE USERS
		SET  USER_PW    = #{user_pw}
			,USER_NAME  = #{user_name}
			,USER_EMAIL = #{user_email}
			,USER_PATH  = #{user_path}
		WHERE USER_ID   = #{user_id}
	</update>
	
	<!-- 
		회원 탈퇴 
		회원 탈퇴 구분을 N에서 Y으로 바꿈 
	-->
	<update id="deleteUser" parameterType="String">
		UPDATE USERS
		SET EXIT_RIGHT = 'Y'
		WHERE USER_ID = #{user_id}
		AND USER_PW = #{user_pw}
	</update>
	
	<!-- 관리자가 체크박스로 사용자 탈퇴 -->
	<update id="deleteUserMG" parameterType="String">
		UPDATE USERS
		SET EXIT_RIGHT = 'Y'
		WHERE USER_ID = #{user_id}
	</update>
</mapper>